{
	"info": {
		"_postman_id": "6c77a702-af32-4f9a-afae-0dd6cb93e747",
		"name": "ТЗ AgentApp",
		"description": "Коллекция для работы с API AgentApp b2b - создание и расчет полиса ОСАГО",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41089122"
	},
	"item": [
		{
			"name": "1. Аутентификация",
			"item": [
				{
					"name": "Получение токена",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"    type: 'object',",
									"    properties: {",
									"        token: { type: 'string' },",
									"    },",
									"    required: ['token'],",
									"    additionalProperties: false",
									"};",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('token', jsonData.token);",
									"    console.log('Token получен: ' + jsonData.token);",
									"} else {",
									"    console.log('Ошибка получения токена: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/users/obtain-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"users",
								"obtain-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Создание субъектов",
			"item": [
				{
					"name": "Создание водителя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    fact_address: { type: ['string', 'null'] },",
									"    legal_address: { type: ['string', 'null'] },",
									"    contact: { ",
									"      type: 'array',",
									"      items: { type: 'string' } ",
									"    },",
									"    inn: { type: ['string', 'null'] },",
									"    has_patronymic: { type: 'boolean' },",
									"    driver_licenses: {",
									"      type: 'array',",
									"      items: {",
									"        type: 'object',",
									"        properties: {",
									"          number: { type: 'string' },",
									"          series: { type: 'string' },",
									"          issue_date: { type: 'string', format: 'date' },",
									"          credential_type: { type: 'string' }",
									"        },",
									"        required: ['number', 'series', 'issue_date', 'credential_type'],",
									"        additionalProperties: false",
									"      }",
									"    },",
									"    additional_data: { type: ['object', 'null'] },",
									"    first_name: { type: 'string' },",
									"    last_name: { type: 'string' },",
									"    patronymic: { type: ['string', 'null'] },",
									"    previous_last_name: { type: ['string', 'null'] },",
									"    birth_date: { type: 'string', format: 'date' },",
									"    gender: { type: 'string', enum: ['M', 'F'] },",
									"    driving_experience_started: { type: 'string', format: 'date' },",
									"    kbm_value: { type: ['number', 'null'] },",
									"    previous_policy_serial: { type: ['string', 'null'] },",
									"    previous_policy_number: { type: ['string', 'null'] }",
									"  },",
									"  required: [",
									"    'id',",
									"    'fact_address',",
									"    'legal_address',",
									"    'contact',",
									"    'inn',",
									"    'has_patronymic',",
									"    'driver_licenses',",
									"    'additional_data',",
									"    'first_name',",
									"    'last_name',",
									"    'patronymic',",
									"    'previous_last_name',",
									"    'birth_date',",
									"    'gender',",
									"    'driving_experience_started',",
									"    'kbm_value',",
									"    'previous_policy_serial',",
									"    'previous_policy_number'",
									"  ],",
									"  additionalProperties: false",
									"};",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('driver_id', jsonData.id);",
									"    pm.environment.set('kbm_value', jsonData.kbm_value);",
									"    pm.environment.set('is_rsa_checked', jsonData.is_rsa_checked);",
									"    console.log('Водитель создан с ID: ' + jsonData.id);",
									"    console.log('КБМ: ' + jsonData.kbm_value);",
									"} else {",
									"    console.log('Ошибка создания водителя: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"{{driver_first_name}}\",\n  \"last_name\": \"{{driver_last_name}}\",\n  \"patronymic\": \"{{driver_patronymic}}\",\n  \"birth_date\": \"{{driver_birth_date}}\",\n  \"driving_experience_started\": \"{{driver_experience_date}}\",\n  \"driver_licenses\": [\n    {\n      \"credential_type\": \"DRIVER_LICENSE\",\n      \"number\": \"{{driver_license_number}}\",\n      \"series\": \"{{driver_license_series}}\",\n      \"issue_date\": \"{{driver_license_date}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/insured_objects/drivers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"insured_objects",
								"drivers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание собственника (ФЛ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    credential: {",
									"      type: 'array',",
									"      items: {",
									"        type: 'object',",
									"        properties: {",
									"          issue_date: { type: 'string', format: 'date' },",
									"          issue_point: { type: 'string' },",
									"          issue_point_code: { type: 'string' },",
									"          credential_type: { type: 'string' },",
									"          number: { type: 'string' },",
									"          series: { type: 'string' }",
									"        },",
									"        required: ['issue_date', 'issue_point', 'issue_point_code', 'credential_type', 'number', 'series'],",
									"        additionalProperties: false",
									"      }",
									"    },",
									"    address: {",
									"      type: 'array',",
									"      items: {",
									"        type: 'object',",
									"        properties: {",
									"          data: { type: 'object' }, // можно расписать подробно, но это огромный объект",
									"          address_query: { type: 'string' },",
									"          address_type: { type: 'string', enum: ['ACTUAL_ADDRESS', 'LEGAL_ADDRESS'] },",
									"          region_kladr_id: { type: 'string' },",
									"          city_kladr_id: { type: 'string' },",
									"          settlement_kladr_id: { type: ['string', 'null'] },",
									"          street_kladr_id: { type: 'string' },",
									"          house_kladr_id: { type: ['string', 'null'] },",
									"          is_without_flat: { type: 'boolean' },",
									"          house: { type: 'string' },",
									"          block: { type: 'string' },",
									"          flat: { type: 'string' },",
									"          region_fias_id: { type: 'string' },",
									"          city_fias_id: { type: 'string' },",
									"          settlement_fias_id: { type: ['string', 'null'] },",
									"          street_fias_id: { type: 'string' }",
									"        },",
									"        required: [",
									"          'data',",
									"          'address_query',",
									"          'address_type',",
									"          'region_kladr_id',",
									"          'city_kladr_id',",
									"          'street_kladr_id',",
									"          'is_without_flat',",
									"          'house',",
									"          'block',",
									"          'flat',",
									"          'region_fias_id',",
									"          'city_fias_id',",
									"          'street_fias_id'",
									"        ],",
									"        additionalProperties: false",
									"      }",
									"    },",
									"    person: { type: 'string' },",
									"    fact_address: { type: 'object' },  // структура такая же, как элемент address[]",
									"    legal_address: { type: 'object' }, // аналогично",
									"    contact: {",
									"      type: 'array',",
									"      items: { type: 'string' }",
									"    },",
									"    inn: { type: ['string', 'null'] },",
									"    has_patronymic: { type: 'boolean' },",
									"    additional_data: { type: ['object', 'null'] },",
									"    first_name: { type: 'string' },",
									"    last_name: { type: 'string' },",
									"    patronymic: { type: ['string', 'null'] },",
									"    previous_last_name: { type: ['string', 'null'] },",
									"    birth_date: { type: 'string', format: 'date' },",
									"    gender: { type: 'string', enum: ['M', 'F'] },",
									"    driving_experience_started: { type: ['string', 'null'], format: 'date' },",
									"    kbm_value: { type: ['number', 'null'] },",
									"    previous_policy_serial: { type: ['string', 'null'] },",
									"    previous_policy_number: { type: ['string', 'null'] }",
									"  },",
									"  required: [",
									"    'id',",
									"    'credential',",
									"    'address',",
									"    'person',",
									"    'fact_address',",
									"    'legal_address',",
									"    'contact',",
									"    'inn',",
									"    'has_patronymic',",
									"    'additional_data',",
									"    'first_name',",
									"    'last_name',",
									"    'patronymic',",
									"    'previous_last_name',",
									"    'birth_date',",
									"    'gender',",
									"    'driving_experience_started',",
									"    'kbm_value',",
									"    'previous_policy_serial',",
									"    'previous_policy_number'",
									"  ],",
									"  additionalProperties: false",
									"};",
									"",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('owner_person_id', jsonData.person);",
									"    console.log('Собственник создан с Person ID: ' + jsonData.person);",
									"} else {",
									"    console.log('Ошибка создания собственника: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"last_name\": \"{{owner_last_name}}\",\n  \"first_name\": \"{{owner_first_name}}\",\n  \"patronymic\": \"{{owner_patronymic}}\",\n  \"birth_date\": \"{{owner_birth_date}}\",\n  \"credential\": [\n    {\n      \"credential_type\": \"RUSSIAN_INTERNAL_PASSPORT\",\n      \"issue_date\": \"{{owner_passport_date}}\",\n      \"issue_point\": \"{{owner_passport_office}}\",\n      \"issue_point_code\": \"{{owner_passport_code}}\",\n      \"number\": \"{{owner_passport_number}}\",\n      \"series\": \"{{owner_passport_series}}\"\n    }\n  ],\n  \"address\": [\n    {\n      \"address_query\": \"{{owner_legal_address}}\",\n      \"address_type\": \"LEGAL_ADDRESS\",\n      \"region_kladr_id\": \"{{owner_region_kladr}}\",\n      \"city_kladr_id\": \"{{owner_city_kladr}}\"\n    },\n    {\n      \"address_query\": \"{{owner_actual_address}}\",\n      \"address_type\": \"ACTUAL_ADDRESS\",\n      \"region_kladr_id\": \"{{owner_region_kladr}}\",\n      \"city_kladr_id\": \"{{owner_city_kladr}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/insured_objects/owners/natural_persons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"insured_objects",
								"owners",
								"natural_persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание страхователя (ФЛ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": { \"type\": \"string\" },",
									"    \"credential\": {",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"          \"issue_date\": { \"type\": \"string\", \"format\": \"date\" },",
									"          \"issue_point\": { \"type\": \"string\" },",
									"          \"issue_point_code\": { \"type\": \"string\" },",
									"          \"credential_type\": { \"type\": \"string\" },",
									"          \"number\": { \"type\": \"string\" },",
									"          \"series\": { \"type\": \"string\" }",
									"        },",
									"        \"required\": [\"issue_date\", \"issue_point\", \"issue_point_code\", \"credential_type\", \"number\", \"series\"],",
									"        \"additionalProperties\": false",
									"      }",
									"    },",
									"    \"address\": {",
									"      \"type\": \"array\",",
									"      \"items\": { \"$ref\": \"#/definitions/addressObject\" }",
									"    },",
									"    \"person\": { \"type\": \"string\" },",
									"    \"fact_address\": { \"$ref\": \"#/definitions/addressObject\" },",
									"    \"legal_address\": { \"$ref\": \"#/definitions/addressObject\" },",
									"    \"contact\": {",
									"      \"type\": \"array\",",
									"      \"items\": { \"type\": \"string\" }",
									"    },",
									"    \"inn\": { \"type\": [\"string\", \"null\"] },",
									"    \"has_patronymic\": { \"type\": \"boolean\" },",
									"    \"additional_data\": { \"type\": [\"object\", \"null\"] },",
									"    \"first_name\": { \"type\": \"string\" },",
									"    \"last_name\": { \"type\": \"string\" },",
									"    \"patronymic\": { \"type\": [\"string\", \"null\"] },",
									"    \"previous_last_name\": { \"type\": [\"string\", \"null\"] },",
									"    \"birth_date\": { \"type\": \"string\", \"format\": \"date\" },",
									"    \"gender\": { \"type\": \"string\", \"enum\": [\"M\", \"F\"] },",
									"    \"driving_experience_started\": { \"type\": [\"string\", \"null\"], \"format\": \"date\" },",
									"    \"kbm_value\": { \"type\": [\"number\", \"null\"] },",
									"    \"previous_policy_serial\": { \"type\": [\"string\", \"null\"] },",
									"    \"previous_policy_number\": { \"type\": [\"string\", \"null\"] }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"credential\",",
									"    \"address\",",
									"    \"person\",",
									"    \"fact_address\",",
									"    \"legal_address\",",
									"    \"contact\",",
									"    \"inn\",",
									"    \"has_patronymic\",",
									"    \"additional_data\",",
									"    \"first_name\",",
									"    \"last_name\",",
									"    \"patronymic\",",
									"    \"previous_last_name\",",
									"    \"birth_date\",",
									"    \"gender\",",
									"    \"driving_experience_started\",",
									"    \"kbm_value\",",
									"    \"previous_policy_serial\",",
									"    \"previous_policy_number\"",
									"  ],",
									"  \"additionalProperties\": false,",
									"  \"definitions\": {",
									"    \"addressObject\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"data\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"qc\": { \"type\": \"integer\" },",
									"            \"area\": { \"type\": [\"string\", \"null\"] },",
									"            \"city\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat\": { \"type\": [\"string\", \"null\"] },",
									"            \"block\": { \"type\": [\"string\", \"null\"] },",
									"            \"floor\": { \"type\": [\"string\", \"null\"] },",
									"            \"house\": { \"type\": [\"string\", \"null\"] },",
									"            \"metro\": { \"type\": [\"string\", \"null\"] },",
									"            \"okato\": { \"type\": [\"string\", \"null\"] },",
									"            \"oktmo\": { \"type\": [\"string\", \"null\"] },",
									"            \"qc_geo\": { \"type\": \"integer\" },",
									"            \"region\": { \"type\": [\"string\", \"null\"] },",
									"            \"source\": { \"type\": [\"string\", \"null\"] },",
									"            \"street\": { \"type\": [\"string\", \"null\"] },",
									"            \"country\": { \"type\": [\"string\", \"null\"] },",
									"            \"fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"geo_lat\": { \"type\": [\"string\", \"null\"] },",
									"            \"geo_lon\": { \"type\": [\"string\", \"null\"] },",
									"            \"entrance\": { \"type\": [\"string\", \"null\"] },",
									"            \"kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"qc_house\": { \"type\": \"integer\" },",
									"            \"timezone\": { \"type\": [\"string\", \"null\"] },",
									"            \"area_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_area\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"fias_code\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat_area\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"block_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"fias_level\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat_price\": { \"type\": [\"string\", \"null\"] },",
									"            \"geoname_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"house_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"postal_box\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement\": { \"type\": [\"string\", \"null\"] },",
									"            \"tax_office\": { \"type\": [\"string\", \"null\"] },",
									"            \"beltway_hit\": { \"type\": [\"string\", \"null\"] },",
									"            \"postal_code\": { \"type\": [\"string\", \"null\"] },",
									"            \"qc_complete\": { \"type\": \"integer\" },",
									"            \"region_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"street_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"area_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"area_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"house_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"area_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"area_with_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"capital_marker\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_with_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"flat_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"history_values\": { \"type\": [\"string\", \"null\"] },",
									"            \"house_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"region_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"street_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"unparsed_parts\": { \"type\": [\"string\", \"null\"] },",
									"            \"block_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"house_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"region_iso_code\": { \"type\": [\"string\", \"null\"] },",
									"            \"region_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"street_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"beltway_distance\": { \"type\": [\"string\", \"null\"] },",
									"            \"country_iso_code\": { \"type\": [\"string\", \"null\"] },",
									"            \"federal_district\": { \"type\": [\"string\", \"null\"] },",
									"            \"region_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"region_with_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"street_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"street_with_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"tax_office_legal\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"square_meter_price\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"fias_actuality_state\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"settlement_with_type\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district_type_full\": { \"type\": [\"string\", \"null\"] },",
									"            \"city_district_with_type\": { \"type\": [\"string\", \"null\"] }",
									"          },",
									"          \"required\": [\"qc\", \"qc_geo\", \"qc_house\", \"qc_complete\"],",
									"          \"additionalProperties\": false",
									"        },",
									"        \"address_query\": { \"type\": \"string\" },",
									"        \"address_type\": { \"type\": \"string\", \"enum\": [\"ACTUAL_ADDRESS\", \"LEGAL_ADDRESS\"] },",
									"        \"region_kladr_id\": { \"type\": \"string\" },",
									"        \"city_kladr_id\": { \"type\": \"string\" },",
									"        \"settlement_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"        \"street_kladr_id\": { \"type\": \"string\" },",
									"        \"house_kladr_id\": { \"type\": [\"string\", \"null\"] },",
									"        \"is_without_flat\": { \"type\": \"boolean\" },",
									"        \"house\": { \"type\": \"string\" },",
									"        \"block\": { \"type\": \"string\" },",
									"        \"flat\": { \"type\": \"string\" },",
									"        \"region_fias_id\": { \"type\": \"string\" },",
									"        \"city_fias_id\": { \"type\": \"string\" },",
									"        \"settlement_fias_id\": { \"type\": [\"string\", \"null\"] },",
									"        \"street_fias_id\": { \"type\": \"string\" }",
									"      },",
									"      \"required\": [",
									"        \"data\",",
									"        \"address_query\",",
									"        \"address_type\",",
									"        \"region_kladr_id\",",
									"        \"city_kladr_id\",",
									"        \"street_kladr_id\",",
									"        \"is_without_flat\",",
									"        \"house\",",
									"        \"block\",",
									"        \"flat\",",
									"        \"region_fias_id\",",
									"        \"city_fias_id\",",
									"        \"street_fias_id\"",
									"      ],",
									"      \"additionalProperties\": false",
									"    }",
									"  }",
									"};",
									"",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('insurant_person_id', jsonData.person);",
									"    console.log('Страхователь создан с Person ID: ' + jsonData.person);",
									"} else {",
									"    console.log('Ошибка создания страхователя: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"last_name\": \"{{insurant_last_name}}\",\n  \"first_name\": \"{{insurant_first_name}}\",\n  \"patronymic\": \"{{insurant_patronymic}}\",\n  \"birth_date\": \"{{insurant_birth_date}}\",\n  \"credential\": [\n    {\n      \"credential_type\": \"RUSSIAN_INTERNAL_PASSPORT\",\n      \"issue_date\": \"{{insurant_passport_date}}\",\n      \"issue_point\": \"{{insurant_passport_office}}\",\n      \"issue_point_code\": \"{{insurant_passport_code}}\",\n      \"number\": \"{{insurant_passport_number}}\",\n      \"series\": \"{{insurant_passport_series}}\"\n    }\n  ],\n  \"address\": [\n    {\n      \"address_query\": \"{{insurant_legal_address}}\",\n      \"address_type\": \"LEGAL_ADDRESS\",\n      \"region_kladr_id\": \"{{insurant_region_kladr}}\",\n      \"city_kladr_id\": \"{{insurant_city_kladr}}\"\n    },\n    {\n      \"address_query\": \"{{insurant_actual_address}}\",\n      \"address_type\": \"ACTUAL_ADDRESS\",\n      \"region_kladr_id\": \"{{insurant_region_kladr}}\",\n      \"city_kladr_id\": \"{{insurant_city_kladr}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/insured_objects/insurants/natural_persons",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"insured_objects",
								"insurants",
								"natural_persons"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Создание объекта страхования",
			"item": [
				{
					"name": "Создание автомобиля",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    credential: {",
									"      type: 'array',",
									"      items: {",
									"        type: 'object',",
									"        properties: {",
									"          id: { type: 'string' },",
									"          issue_date: { type: ['string', 'null'], format: 'date' },",
									"          issue_point: { type: ['string', 'null'] },",
									"          issue_point_code: { type: ['string', 'null'] },",
									"          expiration_date: { type: ['string', 'null'], format: 'date' },",
									"          number: { type: 'string' },",
									"          series: { type: ['string', 'null'] },",
									"          credential_type: { type: 'string' }",
									"        },",
									"        required: [",
									"          'id',",
									"          'issue_date',",
									"          'issue_point',",
									"          'issue_point_code',",
									"          'expiration_date',",
									"          'number',",
									"          'series',",
									"          'credential_type'",
									"        ],",
									"        additionalProperties: false",
									"      }",
									"    },",
									"    car_mark: { type: 'string' },",
									"    car_mark_id: { type: 'string' },",
									"    car_type: { type: 'string' },",
									"    car_model: { type: 'string' },",
									"    car_model_id: { type: 'string' },",
									"    rsa_code: { type: 'string' },",
									"    manufacturing_year: { type: 'integer' },",
									"    vin_number: { type: 'string' },",
									"    car_body_number: { type: ['string', 'null'] },",
									"    chassis_number: { type: ['string', 'null'] },",
									"    car_modification: { type: ['string', 'null'] },",
									"    car_modification_id: { type: ['string', 'null'] },",
									"    transdekra_id: { type: ['string', 'null'] },",
									"    transdekra_modification: { type: ['string', 'null'] },",
									"    number_plate: { type: 'string' },",
									"    has_trailer: { type: 'boolean' },",
									"    is_foreign: { type: 'boolean' },",
									"    color: { type: ['string', 'null'] },",
									"    engine_displacement: { type: ['number', 'null'] },",
									"    engine_power: { type: ['number', 'null'] },",
									"    pts_mark: { type: ['string', 'null'] },",
									"    pts_model: { type: ['string', 'null'] },",
									"    max_mass: { type: ['number', 'null'] },",
									"    seats_count: { type: ['number', 'null'] },",
									"    is_rsa_checked: { type: 'boolean' },",
									"    is_deprecated: { type: 'boolean' }",
									"  },",
									"  required: [",
									"    'id',",
									"    'credential',",
									"    'car_mark',",
									"    'car_mark_id',",
									"    'car_type',",
									"    'car_model',",
									"    'car_model_id',",
									"    'rsa_code',",
									"    'manufacturing_year',",
									"    'vin_number',",
									"    'car_body_number',",
									"    'chassis_number',",
									"    'car_modification',",
									"    'car_modification_id',",
									"    'transdekra_id',",
									"    'transdekra_modification',",
									"    'number_plate',",
									"    'has_trailer',",
									"    'is_foreign',",
									"    'color',",
									"    'engine_displacement',",
									"    'engine_power',",
									"    'pts_mark',",
									"    'pts_model',",
									"    'max_mass',",
									"    'seats_count',",
									"    'is_rsa_checked',",
									"    'is_deprecated'",
									"  ],",
									"  additionalProperties: false",
									"};",
									"",
									"",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('car_id', jsonData.id);",
									"    pm.environment.set('engine_power', jsonData.engine_power);",
									"    console.log('Автомобиль создан с ID: ' + jsonData.id);",
									"    console.log('Мощность двигателя: ' + jsonData.engine_power);",
									"} else {",
									"    console.log('Ошибка создания автомобиля: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"car_model_id\": {{car_model_id}},\n  \"engine_power\": {{car_engine_power}},\n  \"chassis_number\": {{chassis_number}},\n  \"car_body_number\": {{car_body_number}},\n  \"vin_number\": \"{{car_vin}}\",\n  \"number_plate\": \"{{car_plate}}\",\n  \"manufacturing_year\": {{car_year}},\n  \"max_mass\": null,\n  \"credential\": [\n    {\n      \"credential_type\": \"VEHICLE_REGISTRATION\",\n      \"issue_date\": \"{{car_reg_date}}\",\n      \"number\": \"{{car_reg_number}}\",\n      \"series\": \"{{car_reg_series}}\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/v3/insured_objects/cars",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v3",
								"insured_objects",
								"cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание объекта страхования",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    drivers: {",
									"      type: 'array',",
									"      items: { type: 'string' }",
									"    },",
									"    car: { type: 'string' },",
									"    owner: { type: 'string' },",
									"    insurant: { type: 'string' }",
									"  },",
									"  required: ['id', 'drivers', 'car', 'owner', 'insurant'],",
									"  additionalProperties: false",
									"};",
									"",
									"",
									"",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('insured_object_id', jsonData.id);",
									"    console.log('Объект страхования создан с ID: ' + jsonData.id);",
									"} else {",
									"    console.log('Ошибка создания объекта страхования: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"drivers\": [\n        \"{{driver_id}}\"\n    ],\n    \"owner\": \"{{owner_person_id}}\",\n    \"car\": \"{{car_id}}\",\n    \"insurant\": \"{{insurant_person_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/insured_objects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"insured_objects",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Работа с договором",
			"item": [
				{
					"name": "Создание договора",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    origin: { type: ['string', 'null'] },",
									"    valid_from: { type: 'string', format: 'date-time' },",
									"    valid_to: { type: 'string', format: 'date-time' },",
									"    periods: { type: 'array', items: {} },",
									"    calculation: {",
									"      type: 'object',",
									"      properties: {",
									"        is_default: { type: 'boolean' },",
									"        premium: { type: 'number' },",
									"        data: {",
									"          type: 'object',",
									"          properties: {",
									"            valid_from: { type: 'string', format: 'date' },",
									"            valid_to: { type: 'string', format: 'date' },",
									"            insurance_period: { type: 'integer' },",
									"            target_of_using: { type: 'string' },",
									"            drivers_ids: { type: 'array', items: { type: 'string' } },",
									"            is_car_without_registration: { type: 'boolean' },",
									"            engine_power: { type: 'number' },",
									"            has_car_trailer: { type: 'boolean' },",
									"            car_type: { type: 'string' },",
									"            owner_registration: {",
									"              type: 'object',",
									"              properties: {",
									"                address_query: { type: 'string' }",
									"              },",
									"              required: ['address_query'],",
									"              additionalProperties: false",
									"            },",
									"            periods: { type: 'array', items: {} },",
									"            drivers: {",
									"              type: 'array',",
									"              items: {",
									"                type: 'object',",
									"                properties: {",
									"                  birth_date: { type: 'string', format: 'date' },",
									"                  driving_experience_started: { type: 'string', format: 'date' },",
									"                  credential: {",
									"                    type: 'array',",
									"                    items: {",
									"                      type: 'object',",
									"                      properties: {",
									"                        number: { type: 'string' },",
									"                        series: { type: 'string' },",
									"                        issue_date: { type: 'string', format: 'date' },",
									"                        credential_type: { type: 'string' }",
									"                      },",
									"                      required: ['number', 'series', 'issue_date', 'credential_type'],",
									"                      additionalProperties: false",
									"                    }",
									"                  },",
									"                  first_name: { type: 'string' },",
									"                  last_name: { type: 'string' },",
									"                  previous_last_name: { type: ['string', 'null'] },",
									"                  patronymic: { type: ['string', 'null'] }",
									"                },",
									"                required: [",
									"                  'birth_date',",
									"                  'driving_experience_started',",
									"                  'credential',",
									"                  'first_name',",
									"                  'last_name',",
									"                  'previous_last_name',",
									"                  'patronymic'",
									"                ],",
									"                additionalProperties: false",
									"              }",
									"            },",
									"            max_mass: { type: 'number' },",
									"            seats_count: { type: 'number' },",
									"            is_multidrive: { type: 'boolean' },",
									"            insurance_period_kterm: { type: 'string' },",
									"            insurance_period_month: { type: 'integer' },",
									"            insurant_type: { type: 'string' },",
									"            kbm: { type: 'number' },",
									"            is_kbm_request_with_error: { type: 'boolean' }",
									"          },",
									"          required: [",
									"            'valid_from',",
									"            'valid_to',",
									"            'insurance_period',",
									"            'target_of_using',",
									"            'drivers_ids',",
									"            'is_car_without_registration',",
									"            'engine_power',",
									"            'has_car_trailer',",
									"            'car_type',",
									"            'owner_registration',",
									"            'periods',",
									"            'drivers',",
									"            'max_mass',",
									"            'seats_count',",
									"            'is_multidrive',",
									"            'insurance_period_kterm',",
									"            'insurance_period_month',",
									"            'insurant_type',",
									"            'kbm',",
									"            'is_kbm_request_with_error'",
									"          ],",
									"          additionalProperties: false",
									"        },",
									"        coeffs: {",
									"          type: 'object',",
									"          properties: {",
									"            Tbase_min: { type: 'number' },",
									"            Tbase_max: { type: 'number' },",
									"            Ktrailer: { type: 'number' },",
									"            Kregion: { type: 'number' },",
									"            Kengine: { type: 'number' },",
									"            Kexpage: { type: 'number' },",
									"            Klim: { type: 'number' },",
									"            Kterm: { type: 'number' },",
									"            Kbm: { type: 'number' },",
									"            kbm_class: { type: 'string' },",
									"            S_min: { type: 'number' }",
									"          },",
									"          required: [",
									"            'Tbase_min',",
									"            'Tbase_max',",
									"            'Ktrailer',",
									"            'Kregion',",
									"            'Kengine',",
									"            'Kexpage',",
									"            'Klim',",
									"            'Kterm',",
									"            'Kbm',",
									"            'kbm_class',",
									"            'S_min'",
									"          ],",
									"          additionalProperties: false",
									"        }",
									"      },",
									"      required: ['is_default', 'premium', 'data', 'coeffs'],",
									"      additionalProperties: false",
									"    },",
									"    status: { type: 'string' },",
									"    insured_object: { type: ['string', 'null'] },",
									"    insured_object_mortgage: { type: ['string', 'null'] },",
									"    prolongation: { type: ['string', 'null'] },",
									"    agreement_type: { type: 'string' },",
									"    agreement_hash: { type: 'string' },",
									"    is_combo_offer_included: { type: 'boolean' }",
									"  },",
									"  required: [",
									"    'id',",
									"    'origin',",
									"    'valid_from',",
									"    'valid_to',",
									"    'periods',",
									"    'calculation',",
									"    'status',",
									"    'insured_object',",
									"    'insured_object_mortgage',",
									"    'prolongation',",
									"    'agreement_type',",
									"    'agreement_hash',",
									"    'is_combo_offer_included'",
									"  ],",
									"  additionalProperties: false",
									"};",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('agreement_id', jsonData.id);",
									"    if (jsonData.calculation && jsonData.calculation.premium) {",
									"        pm.environment.set('calculation_premium', jsonData.calculation.premium);",
									"        console.log('Премия: ' + jsonData.calculation.premium);",
									"    }",
									"    console.log('Договор создан с ID: ' + jsonData.id);",
									"} else {",
									"    console.log('Ошибка создания договора: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"valid_from\": \"{{contract_start_date}}\",\n    \"valid_to\": \"{{contract_end_date}}\",\n    \"insurance_period\": 8,\n    \"target_of_using\": \"{{target_of_using}}\",\n    \"drivers_ids\": [\n        \"{{driver_id}}\"\n    ],\n    \"is_car_without_registration\": {{is_car_without_registration}},\n    \"engine_power\": {{engine_power}},\n    \"has_car_trailer\": {{has_car_trailer}},\n    \"car_type\": \"{{car_type}}\",\n    \"owner_registration\": {\n        \"address_query\": \"{{owner_legal_address}}\"\n    },\n    \"periods\": []\n}"
						},
						"url": {
							"raw": "{{base_url}}/v1/agreements/calculations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v1",
								"agreements",
								"calculations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление договора",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv({allErrors: true});",
									"",
									"// Проверка статус-кода",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// JSON Schema для ответа",
									"const tagSchema = {",
									"  type: 'object',",
									"  properties: {",
									"    id: { type: 'string' },",
									"    origin: { type: ['string', 'null'] },",
									"    valid_from: { type: 'string', format: 'date-time' },",
									"    valid_to: { type: 'string', format: 'date-time' },",
									"    periods: { type: 'array', items: {} },",
									"    calculation: {",
									"      type: 'object',",
									"      properties: {",
									"        is_default: { type: 'boolean' },",
									"        premium: { type: 'number' },",
									"        data: {",
									"          type: 'object',",
									"          properties: {",
									"            valid_from: { type: 'string', format: 'date' },",
									"            valid_to: { type: 'string', format: 'date' },",
									"            insurance_period: { type: 'integer' },",
									"            target_of_using: { type: 'string' },",
									"            drivers_ids: { type: 'array', items: { type: 'string' } },",
									"            is_car_without_registration: { type: 'boolean' },",
									"            engine_power: { type: 'number' },",
									"            has_car_trailer: { type: 'boolean' },",
									"            car_type: { type: 'string' },",
									"            owner_registration: {",
									"              type: 'object',",
									"              properties: {",
									"                address_query: { type: 'string' }",
									"              },",
									"              required: ['address_query'],",
									"              additionalProperties: false",
									"            },",
									"            periods: { type: 'array', items: {} },",
									"            drivers: {",
									"              type: 'array',",
									"              items: {",
									"                type: 'object',",
									"                properties: {",
									"                  birth_date: { type: 'string', format: 'date' },",
									"                  driving_experience_started: { type: 'string', format: 'date' },",
									"                  credential: {",
									"                    type: 'array',",
									"                    items: {",
									"                      type: 'object',",
									"                      properties: {",
									"                        number: { type: 'string' },",
									"                        series: { type: 'string' },",
									"                        issue_date: { type: 'string', format: 'date' },",
									"                        credential_type: { type: 'string' }",
									"                      },",
									"                      required: ['number', 'series', 'issue_date', 'credential_type'],",
									"                      additionalProperties: false",
									"                    }",
									"                  },",
									"                  first_name: { type: 'string' },",
									"                  last_name: { type: 'string' },",
									"                  previous_last_name: { type: ['string', 'null'] },",
									"                  patronymic: { type: ['string', 'null'] }",
									"                },",
									"                required: [",
									"                  'birth_date',",
									"                  'driving_experience_started',",
									"                  'credential',",
									"                  'first_name',",
									"                  'last_name',",
									"                  'previous_last_name',",
									"                  'patronymic'",
									"                ],",
									"                additionalProperties: false",
									"              }",
									"            },",
									"            max_mass: { type: 'number' },",
									"            seats_count: { type: 'number' },",
									"            is_multidrive: { type: 'boolean' },",
									"            insurance_period_kterm: { type: 'string' },",
									"            insurance_period_month: { type: 'integer' },",
									"            insurant_type: { type: 'string' },",
									"            kbm: { type: 'number' },",
									"            is_kbm_request_with_error: { type: 'boolean' }",
									"          },",
									"          required: [",
									"            'valid_from',",
									"            'valid_to',",
									"            'insurance_period',",
									"            'target_of_using',",
									"            'drivers_ids',",
									"            'is_car_without_registration',",
									"            'engine_power',",
									"            'has_car_trailer',",
									"            'car_type',",
									"            'owner_registration',",
									"            'periods',",
									"            'drivers',",
									"            'max_mass',",
									"            'seats_count',",
									"            'is_multidrive',",
									"            'insurance_period_kterm',",
									"            'insurance_period_month',",
									"            'insurant_type',",
									"            'kbm',",
									"            'is_kbm_request_with_error'",
									"          ],",
									"          additionalProperties: false",
									"        },",
									"        coeffs: {",
									"          type: 'object',",
									"          properties: {",
									"            Tbase_min: { type: 'number' },",
									"            Tbase_max: { type: 'number' },",
									"            Ktrailer: { type: 'number' },",
									"            Kregion: { type: 'number' },",
									"            Kengine: { type: 'number' },",
									"            Kexpage: { type: 'number' },",
									"            Klim: { type: 'number' },",
									"            Kterm: { type: 'number' },",
									"            Kbm: { type: 'number' },",
									"            kbm_class: { type: 'string' },",
									"            S_min: { type: 'number' }",
									"          },",
									"          required: [",
									"            'Tbase_min',",
									"            'Tbase_max',",
									"            'Ktrailer',",
									"            'Kregion',",
									"            'Kengine',",
									"            'Kexpage',",
									"            'Klim',",
									"            'Kterm',",
									"            'Kbm',",
									"            'kbm_class',",
									"            'S_min'",
									"          ],",
									"          additionalProperties: false",
									"        }",
									"      },",
									"      required: ['is_default', 'premium', 'data', 'coeffs'],",
									"      additionalProperties: false",
									"    },",
									"    status: { type: 'string' },",
									"    insured_object: { type: ['string', 'null'] },",
									"    insured_object_mortgage: { type: ['string', 'null'] },",
									"    prolongation: { type: ['string', 'null'] },",
									"    agreement_type: { type: 'string' },",
									"    agreement_hash: { type: 'string' },",
									"    is_combo_offer_included: { type: 'boolean' }",
									"  },",
									"  required: [",
									"    'id',",
									"    'origin',",
									"    'valid_from',",
									"    'valid_to',",
									"    'periods',",
									"    'calculation',",
									"    'status',",
									"    'insured_object',",
									"    'insured_object_mortgage',",
									"    'prolongation',",
									"    'agreement_type',",
									"    'agreement_hash',",
									"    'is_combo_offer_included'",
									"  ],",
									"  additionalProperties: false",
									"};",
									"",
									"// Валидация схемы ответа",
									"pm.test('Response schema is valid', function () {",
									"    const responseJson = pm.response.json();",
									"    const validate = ajv.compile(tagSchema);",
									"    const valid = validate(responseJson);",
									"    ",
									"    if (!valid) {",
									"        const errors = validate.errors.map(error => {",
									"            return `Field: ${error.instancePath || 'root'}, Error: ${error.message}`;",
									"        }).join('; ');",
									"        pm.expect.fail(`Schema validation failed: ${errors}`);",
									"    }",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set('updated_agreement_id', jsonData.id);",
									"    console.log('Договор обновлен с ID: ' + jsonData.id);",
									"} else {",
									"    console.log('Ошибка обновления договора: ' + pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"insured_object\": \"{{insured_object_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/{{api_version}}/agreements/{{agreement_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{api_version}}",
								"agreements",
								"{{agreement_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "Token {{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request скрипт для логирования",
					"console.log('Выполняется запрос: ' + pm.request.name);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Общий тест для всех запросов",
					"pm.test('Status code not 5xx', function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://partner.agentapp.ru"
		},
		{
			"key": "api_version",
			"value": "v1"
		},
		{
			"key": "username",
			"value": "qa@qa.qa"
		},
		{
			"key": "password",
			"value": "111"
		}
	]
}